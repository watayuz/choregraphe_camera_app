<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram scale="168.179">
                        <Box name="Take Picture" id="1" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="146" y="85">
                            <bitmap>media/images/box/interaction/picture.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        #self.recordFolder = "/home/nao/recordings/cameras/"
        self.recordFolder = "/home/nao/"

    def onLoad(self):
        self.framemanager = ALProxy("ALFrameManager")
        #self.tabletService = ALproxy("ALTabletService")

        self.bIsRunning = False
        try:
            self.photoCapture = ALProxy( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        import os
        self.recordFolder = os.path.join(
        self.framemanager.getBehaviorPath(self.behaviorId), "../html")
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )


        #self.tabletService.showImage("/home/nao/test.jpg")
        self.bIsRunning = False
        self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                            <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="640 x 480" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                <Choice value="160 x 120" />
                                <Choice value="320 x 240" />
                                <Choice value="640 x 480" />
                                <Choice value="1280 x 960" />
                            </Parameter>
                            <Parameter name="File Name" inherits_from_parent="0" content_type="3" value="test" default_value="image" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                            <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                <Choice value="Top" />
                                <Choice value="Bottom" />
                            </Parameter>
                        </Box>
                        <Box name="Show Image" id="13" localization="8" tooltip="display an image on the screen&#x0A;&#x0A;V1.0.0&#x0A;" x="341" y="79">
                            <bitmap>media/images/box/interaction/rec_movie.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):

    def onLoad(self):
        self.frameManager = None
        try:
            self.frameManager = ALProxy("ALFrameManager")
        except Exception as e:
            self.logger.error(e)

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def _getAbsoluteUrl(self, partial_url):
        import os
        subPath = os.path.join(self.packageUid(), os.path.normpath(partial_url).lstrip("\\/"))
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        return "http://%s/apps/%s" %(self._getTabletService().robotIp(), subPath.replace(os.path.sep, "/"))

    def onInput_onStart(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                url = self.getParameter("ImageUrl")
                if url == '':
                    self.logger.error("URL of the image is empty")
                if not url.startswith('http'):
                    url = self._getAbsoluteUrl(url)
                tabletService.showImage(url)
            except Exception as err:
                self.logger.error("Error during ShowImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't display the image.")
            self.onStopped()

    def onInput_onHideImage(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                tabletService.hideImage()
            except Exception as err:
                self.logger.error("Error during HideImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't hide the image.")
            self.onStopped()

    def onInput_onPreLoadImage(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                partialUrl = self.getParameter("ImageUrl")
                fullUrl = self._getAbsoluteUrl(partialUrl)
                tabletService.preLoadImage(fullUrl)
            except Exception as err:
                self.logger.warning("Error during preLoadImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't preload the image.")
            self.onStopped()

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="onHideImage" type="1" type_size="1" nature="1" inner="0" tooltip="Hide the image when a signal is received on this input." id="4" />
                            <Input name="onPreLoadImage" type="1" type_size="1" nature="1" inner="0" tooltip="Preload the image when a signal is received on this input." id="5" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" />
                            <Parameter name="ImageUrl" inherits_from_parent="0" content_type="3" value="test.jpg" default_value="" custom_choice="0" tooltip='path of the image inside the &quot;html&quot; folder (e.g. &quot;/images/myimage.png&quot;' id="7" />
                        </Box>
                        <Box name="Record Video" id="3" localization="8" tooltip="Record a video from one of the cameras. Stop recording when the duration set in parameter is elapsed. Note: By default, the file will be stored on the robot in /home/nao/recordings/cameras.&#x0A;&#x0A;V1.1.0&#x0A;" x="152" y="236">
                            <bitmap>media/images/box/interaction/rec_movie.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Parameter name="File name" inherits_from_parent="0" content_type="3" value="recording" default_value="recording" custom_choice="0" tooltip="Name of the destination file without its extension." id="5" />
                            <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="10" default_value="10" min="0.01" max="120" tooltip="Duration of the video capture." id="6" />
                            <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="320 x 240" default_value="320 x 240" custom_choice="0" tooltip="Recording resolution." id="7">
                                <Choice value="160 x 120" />
                                <Choice value="320 x 240" />
                                <Choice value="640 x 480" />
                            </Parameter>
                            <Parameter name="Frame rate (frame/s)" inherits_from_parent="0" content_type="1" value="10" default_value="10" min="1" max="30" tooltip="Recording frame rate.&#x0A;&#x0A;!Warning! MJPG format requires framerate greater than 2.0." id="8" />
                            <Parameter name="Format" inherits_from_parent="0" content_type="3" value="MJPG" default_value="MJPG" custom_choice="0" tooltip="Recording format:&#x0A;- IYUV for raw avi.&#x0A;- MJPG for compressed avi." id="9">
                                <Choice value="IYUV" />
                                <Choice value="MJPG" />
                            </Parameter>
                            <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip='Enable to select the camera that will record the video.&#x0A;It is possible to select the Top camera, the Bottom camera or the &quot;Default&quot; camera, which corresponds to the one displayed in the Video monitor and which can be changed with the &quot;Select Camera&quot; box.' id="10">
                                <Choice value="Top" />
                                <Choice value="Bottom" />
                            </Parameter>
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Record Video" id="4" localization="8" tooltip="Record a video from one of the cameras. Stop recording when the onStop intput is&#x0A;stimulated.&#x0A;&#x0A;Note: By default, the file will be stored on the robot in /home/nao." x="564" y="10">
                                                <bitmap>media/images/box/interaction/rec_movie.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }
        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        #~ puts code for box initialization here
        try:
            self.videoRecorder = ALProxy("ALVideoRecorder")
        except Exception as e:
            self.videoRecorder = None
            self.logger.error(e)


    def onUnload(self):
        #~ puts code for box cleanup here
        if( self.videoRecorder and self.videoRecorder.isRecording() ):
            self.videoRecorder.stopRecording()

    def onInput_onStart(self):
        resolutionValue = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        formatValue = str(self.getParameter("Format"))
        frameRateValue = self.getParameter("Frame rate (frame/s)")
        fileName = self.getParameter("File name")
        if self.videoRecorder:
            self.videoRecorder.setResolution(resolutionValue)
            self.videoRecorder.setCameraID(cameraID)
            self.videoRecorder.setVideoFormat(formatValue)
            self.videoRecorder.setFrameRate(frameRateValue)

            self.videoRecorder.startRecording(self.recordFolder, fileName)

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                <Parameter name="File name" inherits_from_parent="1" content_type="3" value="recording" default_value="recording" custom_choice="0" tooltip="Name of the destination file without its extension." id="5" />
                                                <Parameter name="Resolution" inherits_from_parent="1" content_type="3" value="320 x 240" default_value="320 x 240" custom_choice="0" tooltip="Recording resolution." id="6">
                                                    <Choice value="160 x 120" />
                                                    <Choice value="320 x 240" />
                                                    <Choice value="640 x 480" />
                                                </Parameter>
                                                <Parameter name="Frame rate (frame/s)" inherits_from_parent="1" content_type="1" value="10" default_value="10" min="1" max="30" tooltip="Recording frame rate.&#x0A;&#x0A;!Warning! MJPG format requires framerate greater than 2.0." id="7" />
                                                <Parameter name="Format" inherits_from_parent="1" content_type="3" value="MJPG" default_value="MJPG" custom_choice="0" tooltip="Recording format:&#x0A;- ARV for raw YUV422 format.&#x0A;- IYUV for raw avi.&#x0A;- MJPG for compressed avi." id="8">
                                                    <Choice value="ARV" />
                                                    <Choice value="IYUV" />
                                                    <Choice value="MJPG" />
                                                </Parameter>
                                                <Parameter name="Camera" inherits_from_parent="1" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip='Enable to select the camera that will record the video.&#x0A;It is possible to select the Top camera, the Bottom camera or the &quot;Default&quot; camera, which corresponds to the one displayed in the Video monitor and which can be changed with the &quot;Select Camera&quot; box.' id="9">
                                                    <Choice value="Top" />
                                                    <Choice value="Bottom" />
                                                </Parameter>
                                            </Box>
                                            <Box name="Wait" id="5" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="226" y="68">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Duration (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                <Parameter name="Duration (s)" inherits_from_parent="1" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                            </Box>
                                            <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="4" indexofinput="3" outputowner="5" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Play Video" id="2" localization="8" tooltip="Plays the video; returns when it&apos;s done.&#x0A;&#x0A;You can also interrupt, pause or resume the video.&#x0A;&#x0A;You can get events when the video starts or finishes.&#x0A;&#x0A;V1.0.0&#x0A;" x="375" y="244">
                            <bitmap>media/images/box/interaction/rec_movie.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[

class MyClass(GeneratedClass):

    def onLoad(self):
        self.isRunning = False
        self.startConnectId = None
        self.finishConnectId = None
        self.tabletService = None
        self.frameManager = None
        try:
            self.frameManager = ALProxy("ALFrameManager")
        except Exception as e:
            self.logger.error(e)

    def onUnload(self):
        if self.tabletService:
            try:
                self.tabletService.stopVideo()
            except Exception as e:
                self.logger.error(e)
            finally:
                self.disconnectStartedListener()
                self.disconnectFinishedListener()
                self.isRunning = False

    def disconnectFinishedListener(self):
        if self.finishConnectId and self.tabletService:
            try:
                self.tabletService.videoFinished.disconnect(self.finishConnectId)
                self.finishConnectId = None
            except Exception as e:
                self.logger.error(e)

    def disconnectStartedListener(self):
        if self.startConnectId and self.tabletService:
            try:
                self.tabletService.videoStarted.disconnect(self.startConnectId)
                self.startConnectId = None
            except Exception as e:
                self.logger.error(e)

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def _getAbsoluteUrl(self, partialUrl):
        import os
        subpath = os.path.join(self.packageUid(), os.path.normpath(partialUrl).lstrip("\\/"))
        if self.tabletService:
            return "http://%s/apps/%s" % (self.tabletService.robotIp(), subpath.replace(os.path.sep, "/"))
        else:
            self.logger.warning("No ALTabletService, can't get robot Ip.")
            return None

    def connectStartCallback(self):
        try:
            self.startConnectId = self.tabletService.videoStarted.connect(self.onVideoStarted)
        except Exception as err:
            self.logger.warning("Failed to subscribe to started callback: %s " % err)

    def connectStopCallback(self):
        try:
            self.finishConnectId = self.tabletService.videoFinished.connect(self.onVideoFinished)
        except Exception as err:
            self.logger.warning("Failed to subscribe to stopped callback: %s " % err)

    def onInput_onStart(self):
        if self.isRunning:
            return # already running, nothing to do
        self.isRunning = True
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        self.tabletService = self._getTabletService()
        if self.tabletService:
            try:
                url = self.getParameter("VideoPath")
                if url == '':
                    self.logger.error("URL of the video is empty")
                if not url.startswith('http'):
                    url = self._getAbsoluteUrl(url)
                self.connectStartCallback()
                self.connectStopCallback()
                self.tabletService.playVideo(url)
            except Exception as err:
                self.logger.warning("Error during playVideo or subscribe: %s " % err)
                self.onStopped()
                self.isRunning = False
        else:
            self.logger.warning("No ALTabletService, can't play video.")
            self.onStopped()
            self.isRunning = False

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()

    def onInput_onPauseVideo(self):
        if self.tabletService:
            self.tabletService.pauseVideo()

    def onInput_onResumeVideo(self):
        if self.tabletService:
            self.tabletService.resumeVideo()

    def onVideoStarted(self):
        self.disconnectStartedListener()
        self.onStarted()

    def onVideoFinished(self):
        self.disconnectFinishedListener()
        self.onStopped()
        self.isRunning = False]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="onPauseVideo" type="1" type_size="1" nature="1" inner="0" tooltip="Pause the video when a signal is received on this input." id="4" />
                            <Input name="onResumeVideo" type="1" type_size="1" nature="1" inner="0" tooltip="Resume the video when a signal is received on this input." id="5" />
                            <Output name="onStarted" type="1" type_size="1" nature="2" inner="0" tooltip="Triggered when the video started" id="6" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="7" />
                            <Parameter name="VideoPath" inherits_from_parent="0" content_type="3" value="/home/nao/recordings/cameras/recording" default_value="" custom_choice="0" tooltip='path of the video inside the &quot;html&quot; folder (e.g. &quot;/video/myvideo.mp4&quot;' id="8" />
                        </Box>
                        <Link inputowner="13" indexofinput="2" outputowner="1" indexofoutput="3" />
                        <Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="4" />
                        <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
